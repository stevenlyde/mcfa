#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the PLT Scheme editor format.
   Open this file in DrScheme version 4.2.2 or later to read it.

   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://www.plt-scheme.org
|#
 27 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
#"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 43 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 29 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drscheme:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 8 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 29 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1
          0 3037 0 17 3 29 #";; A Scheme-to-Java compiler."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";; The compiler is designed to show how close"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; the mapping between Scheme and Java can be."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";; Author: Matthew Might"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";; Site:   http://matt.might.net/"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";;         http://www.ucombinator.org/"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 51 #";; The input language contains integers, variables,"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";; a few primitives, lambda terms, let terms, explicit"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";; recursion (letrec), conditionals and function"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; applications, sequencing and mutable variables."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";; <exp> ::= <const>"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";;        |  <prim>"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";;        |  <var>"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";;        |  (lambda (<var> ...) <exp>)"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";;        |  (if <exp> <exp> <exp>)"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";;        |  (set! <var> <exp>)"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";;        |  (let ((<var> <exp>) ...) <exp>)"
0 0 4 29 1 #"\n"
0 0 17 3 63
#";;        |  (letrec ((<var> (lambda (<var>...) <exp>))) <exp>)"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;        |  (begin <exp> ...)"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";;        |  (<exp> <exp> ...)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";; <const> ::= <int>"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";; To run this compiler, run an R5RS-compatible interpreter"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";; on this file and pipe a Scheme expression into stdin:"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";;  $ interpret thisfile.scm < input.scm > BOut.java"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";;  $ javac Value.java BOut.java "
0 0 4 29 1 #"\n"
0 0 17 3 15 #";;  $ java BOut"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 57 #";; The file Value.java is required to compile the output."
0 0 4 29 1 #"\n"
0 0 17 3 56 #";; Value.java defines internal data types as well as the"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";; runtime environment."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";; To handle closures, the compiler uses Java's"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";; anonymous class mechanism."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";; To handle recursion, the compiler creates a Y"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";; combinator with the appropriate arity."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; To handle mutable variables, the compiler first"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; analyzes programs to find the set!'d names."
0 0 4 29 1 #"\n"
0 0 17 3 55 #";; Mutable names are then wrapped in ValueCell objects."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";; This compiler is reasonably close to meta-circular."
0 0 4 29 1 #"\n"
0 0 17 3 54 #";; With a few modifications and an s-expression parser"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";; in Java, it would be."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";; Utilities."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"caadr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"cadddr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 3 #"lst"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 4 #"lst2"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"string-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 16 #"; void : -> void"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 20 3 2 #"#f"
0 0 17 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #"; tagged-list? : symbol value -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 17 3 1 #" "
0 0 14 3 3 #"tag"
0 0 17 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 14 3 3 #"tag"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 33 #"; char->natural : char -> natural"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"char->natural"
0 0 17 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 17 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"i"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"char->integer"
0 0 17 3 1 #" "
0 0 14 3 1 #"c"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 17 3 1 #" "
0 0 14 3 1 #"i"
0 0 17 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 17 3 1 #" "
0 0 20 3 2 #"-2"
0 0 17 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 17 3 1 #" "
0 0 20 3 1 #"2"
0 0 17 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #"; integer->char-list : integer -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"integer->char-list"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";; Data type predicates and accessors."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 25 #"; const? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"const?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"integer?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"; ref? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"ref?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"; let? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"let?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 3 #"let"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #"; let->bindings : let-exp -> alist[symbol,exp]"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"let->bindings"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #"; let->exp : let-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"let->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #"; letrec1? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"letrec1?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"letrec"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #"; letrec1->binding : letrec1-exp -> (symbol exp)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"letrec1->binding"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caadr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 35 #"; letrec1->exp : letrec1-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"letrec1->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #"; lambda? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #"; lambda->formals : lambda-exp -> list[symbol]"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"lambda->formals"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 33 #"; lambda->exp : lambda-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"lambda->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 22 #"; if? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"if?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 31 #"; if->condition : if-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"if->condition"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #"; if->then : if-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->then"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #"; if->else : if-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->else"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"cadddr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"; app? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"app?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #"; app->fun : app-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"app->fun"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; app->args : app-exp -> list[exp]"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"app->args"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 24 #"; prim? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"prim?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"display"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 25 #"; begin? : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"begin?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 5 #"begin"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #"; begin->exps : begin-exp -> list[exp]"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 11 #"begin->exps"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"; set! : exp -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"set!?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"tagged-list?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 28 #"; set!-var : set!-exp -> var"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"set!-var"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 28 #"; set!-exp : set!-exp -> exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"set!-exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";; Desugarings."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; let=>lambda : let-exp -> app-exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"let=>lambda"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"let?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 17 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"vars"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 17 3 1 #" "
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"let->bindings"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"args"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 17 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"let->bindings"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 20 3 1 #"`"
0 0 22 3 2 #"(("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 2 #",@"
0 0 14 3 4 #"vars"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 8 #"let->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 26 3 2 #",@"
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #"; arity : lambda-exp -> nat"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arity"
0 0 17 3 1 #" "
0 0 14 3 3 #"lam"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"lambda->formals"
0 0 17 3 1 #" "
0 0 14 3 3 #"lam"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 29 #"; xargs : nat -> list[symbol]"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"xargs"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"<="
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 17 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"string->symbol"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 5 #"xargs"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 17 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 4 29 1 #"\n"
0 0 17 3 55 #"; Yn generates the Y combinator for n-arity procedures."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"Yn"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 20 3 1 #"`"
0 0 22 3 2 #"(("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"h"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"F"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"F"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 2 #",@"
0 0 22 3 1 #"("
0 0 14 3 5 #"xargs"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 22 3 3 #"((("
0 0 14 3 1 #"h"
0 0 17 3 1 #" "
0 0 14 3 1 #"h"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 14 3 1 #"F"
0 0 22 3 1 #")"
0 0 17 11 1 #" "
0 0 26 3 2 #",@"
0 0 22 3 1 #"("
0 0 14 3 5 #"xargs"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"h"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"F"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"F"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 2 #",@"
0 0 22 3 1 #"("
0 0 14 3 5 #"xargs"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 22 3 3 #"((("
0 0 14 3 1 #"h"
0 0 17 3 1 #" "
0 0 14 3 1 #"h"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 14 3 1 #"F"
0 0 22 3 1 #")"
0 0 17 11 1 #" "
0 0 26 3 2 #",@"
0 0 22 3 1 #"("
0 0 14 3 5 #"xargs"
0 0 17 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 37 #"; letrec1=>Y : letrec1-exp -> let-exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"letrec1=>Y"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"letrec1?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 17 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 7 #"binding"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"letrec1->binding"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 4 #"name"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 7 #"binding"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 3 #"arg"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 14 3 7 #"binding"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 8 #"num-args"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"arity"
0 0 17 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 17 3 1 #" "
0 0 22 3 2 #"(("
0 0 26 3 1 #","
0 0 14 3 4 #"name"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 2 #"Yn"
0 0 17 3 1 #" "
0 0 14 3 8 #"num-args"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 26 3 1 #","
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 26 3 1 #","
0 0 14 3 3 #"arg"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #"           "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 12 #"letrec1->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 4 29 1 #"\n"
0 0 17 3 35 #"; begin=>let : begin-exp -> let-exp"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 10 #"begin=>let"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"singlet?"
0 0 17 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"list?"
0 0 17 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 17 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"dummy-bind"
0 0 17 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"singlet?"
0 0 17 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 1 #")"
0 0 17 3 5 #"     "
0 0 20 3 1 #"`"
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 17 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"$_"
0 0 17 3 1 #" "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 26 #"                          "
0 0 26 3 1 #","
0 0 22 3 1 #"("
0 0 14 3 10 #"dummy-bind"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 4 #"exps"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"dummy-bind"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 11 #"begin->exps"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";; Mutable variable analysis."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";; Variables which are mutable are "
0 0 4 29 1 #"\n"
0 0 17 3 32 #";; wrapped in ValueCell objects."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; mutable-variables : list[symbol]"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 14 3 17 #"mutable-variables"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 31 #"; mark-mutable : symbol -> void"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 17 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 17 3 1 #" "
0 0 14 3 17 #"mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 17 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 17 3 1 #" "
0 0 14 3 17 #"mutable-variables"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 33 #"; is-mutable? : symbol -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"is-mutable?"
0 0 17 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"is-in?"
0 0 17 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 12 #"            "
0 0 20 3 2 #"#t"
0 0 4 29 1 #"\n"
0 0 17 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 6 #"is-in?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 1 #"S"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 6 #"is-in?"
0 0 17 3 1 #" "
0 0 14 3 17 #"mutable-variables"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #"; analyze-mutable-variables : exp -> void"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 6 #"const?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"ref?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 5 #"prim?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 7 #"lambda?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"lambda->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"let?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 17 3 1 #" "
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 17 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 17 11 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"let->bindings"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"let->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 8 #"letrec1?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 17 11 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"letrec1->binding"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"letrec1->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 5 #"set!?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 12 #"mark-mutable"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"set!-var"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"if?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"if->condition"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->then"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->else"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 15 3 6 #"begin?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 17 3 1 #" "
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 11 #"begin->exps"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"app?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 17 3 1 #" "
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 4 #"void"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 17 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 17 3 1 #" "
0 0 19 3 27 #"\"unknown expression type: \""
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";; Name-mangling."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; We have to \"mangle\" Scheme identifiers into"
0 0 4 29 1 #"\n"
0 0 17 3 50 #";; Java-compatible identifiers, because names like"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";; foo-bar/baz are not identifiers in Java."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 27 #"; mangle : symbol -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"mangle"
0 0 17 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 17 3 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 17 3 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"char-alphabetic?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"char=?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 11 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 20 3 3 #"#\\_"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 13 #"char-numeric?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 17 3 1 #" "
0 0 20 3 3 #"#\\_"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"integer->char-list"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"char->natural"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 11 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 30 #"                              "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 5 #"chars"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->string"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"m"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"string->list"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"symbol->string"
0 0 17 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";; Compilation routines."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #"; java-compile-program : exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"java-compile-program"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 19 3 50 #"\"public class BOut extends RuntimeEnvironment {\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 19 3 46 #"\" public static void main (String[] args) {\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 19 3 6 #"\" ;\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 19 3 6 #"\" }\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 19 3 5 #"\"}\\n\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; java-compile-exp : exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 17 3 17 #"    ; core forms:"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 6 #"const?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 18 #"java-compile-const"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 5 #"prim?"
0 0 17 3 2 #"  "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 17 #"java-compile-prim"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"ref?"
0 0 17 3 3 #"   "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-ref"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 7 #"lambda?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 19 #"java-compile-lambda"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"if?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 15 #"java-compile-if"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 5 #"set!?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 17 #"java-compile-set!"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 17 3 22 #"    ; syntactic sugar:"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"let?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"let=>lambda"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 8 #"letrec1?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"letrec1=>Y"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 15 3 6 #"begin?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 10 #"begin=>let"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 17 3 19 #"    ; applications:"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 4 #"app?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-app"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 42 #"; java-compile-const : const-exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"java-compile-const"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 8 #"integer?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 21 #"                     "
0 0 19 3 15 #"\"new IntValue(\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 17 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 17 3 1 #" "
0 0 19 3 20 #"\"unknown constant: \""
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #"; java-compile-prim : prim-exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"java-compile-prim"
0 0 17 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 17 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 19 3 5 #"\"sum\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"-"
0 0 17 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 19 3 12 #"\"difference\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 17 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 19 3 9 #"\"product\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"="
0 0 17 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 17 3 7 #"       "
0 0 19 3 10 #"\"numEqual\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 7 #"display"
0 0 17 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 9 #"\"display\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 17 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 17 3 1 #" "
0 0 19 3 22 #"\"unhandled primitive \""
0 0 17 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #"; java-compile-ref : ref-exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-ref"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 2 #"(("
0 0 14 3 11 #"is-mutable?"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 19 3 4 #"\"m_\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"mangle"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 8 #"\".value\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 17 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 6 #"mangle"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 17 3 21 #"java-compile-formals "
0 0 17 3 1 #":"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #"["
0 0 17 3 6 #"symbol"
0 0 17 3 1 #"]"
0 0 17 3 1 #" "
0 0 17 3 2 #"->"
0 0 17 3 7 #" string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"java-compile-formals"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 19 3 2 #"\"\""
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 19 3 14 #"\"final Value \""
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 6 #"mangle"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 19 3 4 #"\", \""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"java-compile-formals"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #"           "
0 0 19 3 2 #"\"\""
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 44 #"; java-compile-lambda : lambda-exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"java-compile-lambda"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"java-wrap-mutables"
0 0 17 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 19 3 2 #"\"\""
0 0 4 29 1 #"\n"
0 0 17 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"is-mutable?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 14 #"              "
0 0 19 3 21 #"\" final ValueCell m_\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"mangle"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 14 #"              "
0 0 19 3 19 #"\" = new ValueCell(\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"mangle"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 19 3 6 #"\");\\n\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 13 #"             "
0 0 19 3 2 #"\"\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 18 #"java-wrap-mutables"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 4 #"vars"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 17 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 7 #"formals"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"lambda->formals"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 8 #"num-args"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 19 3 19 #"\"new NullProcValue\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 17 3 1 #" "
0 0 14 3 8 #"num-args"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 9 #"\" () {\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 19 3 22 #"\" public Value apply(\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"java-compile-formals"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 7 #"\") {\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 42 #"     ; wrap mutables in ValueCell objects:"
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 18 #"java-wrap-mutables"
0 0 17 3 1 #" "
0 0 14 3 7 #"formals"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 19 3 4 #"\"\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 19 3 11 #"\"  return \""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"lambda->exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 19 3 6 #"\" ;\\n\""
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 19 3 6 #"\"}}\\n\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #"; java-compile-args : list[exp] -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"java-compile-args"
0 0 17 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 19 3 2 #"\"\""
0 0 4 29 1 #"\n"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 17 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 19 3 4 #"\", \""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"java-compile-args"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #"           "
0 0 19 3 2 #"\"\""
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #"; java-compile-set! : set!-exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"java-compile-set!"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 17 3 1 #" "
0 0 19 3 19 #"\"VoidValue.Void(m_\""
0 0 4 29 1 #"\n"
0 0 17 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 6 #"mangle"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"set!-var"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 17 #"                 "
0 0 19 3 11 #"\".value = \""
0 0 4 29 1 #"\n"
0 0 17 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"set!-exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 17 #"                 "
0 0 19 3 3 #"\")\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #"; java-compile-app : app-exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-app"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 17 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 4 #"args"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"app->args"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 3 #"fun"
0 0 17 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"app->fun"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 8 #"num-args"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 17 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 19 3 13 #"\"((ProcValue\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"number->string"
0 0 17 3 1 #" "
0 0 14 3 8 #"num-args"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 4 #"\")(\""
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 14 3 3 #"fun"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 11 #"\")).apply(\""
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 17 #"java-compile-args"
0 0 17 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 17 3 1 #" "
0 0 19 3 5 #"\")\\n\""
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 36 #"; java-compile-if : if-exp -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"java-compile-if"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 19 3 3 #"\"(\""
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"if->condition"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 19 3 19 #"\").toBoolean() ? (\""
0 0 17 3 1 #" "
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->then"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 19 3 7 #"\") : (\""
0 0 4 29 1 #"\n"
0 0 17 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 16 #"java-compile-exp"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"if->else"
0 0 17 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 17 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";; Read in an expression, compile it, and print it out:"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";; Hard-coded program for static analysis benchmarking."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 17 3 1 #" "
0 0 14 3 13 #"input-program"
0 0 17 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 25 #"analyze-mutable-variables"
0 0 17 3 1 #" "
0 0 14 3 13 #"input-program"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 17 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"java-compile-program"
0 0 17 3 1 #" "
0 0 14 3 13 #"input-program"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";; The resulting program requires Value.java to compile."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0           0
